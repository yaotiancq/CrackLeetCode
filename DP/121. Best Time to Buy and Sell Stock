# You are given an array prices where prices[i] is the price of a given stock on the ith day.
# You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
# Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

# Example 1:
# Input: prices = [7,1,5,3,6,4]
# Output: 5
# Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
# Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

# Example 2:
# Input: prices = [7,6,4,3,1]
# Output: 0
# Explanation: In this case, no transactions are done and the max profit = 0.

class Solution:

"""
The i-th day's profit is related with i-1 th day's profit. If i-th day price is higher than i-1 day, then we need to wait for i-th day to sale stock.
If i-th day price is lower than i-1 day, we sale stock at i-th will make profit loss. That exist decision, DP can be used.
Let dp[i] be the maximum profit we can get when saling stock at i-th day. We can not define it as the maximum profit when saling stock at or before i-th day.
If we do this, we can not do anything with dp[i] and nums[i], because we do not know when saling happens.
If nums[i]>nums[i-1], nums[i]-nums[i-1] is the extra profit we earn at i-th than i-1 th.
But, if the drop between i-th and i-1 th is too large, so that the dp[i-1]+nums[i]-nums[i-1]<0. We choose another day to buy stock.
So, dp[i]=max(prices[i]-prices[i-1]+dp[i-1],0)

Observe deduction relation, we can see that, i-th status is only related with i-1 th status. So, we can use two varibles instead of dp array to maintain dp process.
And, we can use another varible to record the current largest value to release the need of max(dp).
"""
    def maxProfit(self, prices: List[int]) -> int:
        
        dp=[0]*len(prices)

        for i in range(1,len(prices)):
            dp[i]=max(prices[i]-prices[i-1]+dp[i-1],0)
       
        return max(dp)
