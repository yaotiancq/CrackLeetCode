# You are given an array prices where prices[i] is the price of a given stock on the ith day.
# You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
# Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

# Example 1:
# Input: prices = [7,1,5,3,6,4]
# Output: 5
# Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
# Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

# Example 2:
# Input: prices = [7,6,4,3,1]
# Output: 0
# Explanation: In this case, no transactions are done and the max profit = 0.

class Solution:

"""
For the design of DP array, we must answer a question. What information we want to record? Or, try to understand that what we need for current round of decision 
making.
In this problem, we want to know the max profit we can get through one buy and sell. From [7,1,5,3,6,4], we know that greedy method is to find the lowest price then
find the largest price on its right side. And we might need to check it mulitple times, that is through a loop to update the mimimal value and the largest difference
we can get. So, we need keep record of two information. One is the minimal value we can get as the traversal goes on. Anther is the maximum difference of current 
value with previous maximum difference. We can say that this is greedy method, or it can be treated as DP.
This analysis work for easy transfered logic. But, it may not be easy to conclude when the transfered logic is not easy.
In this problem, every candidate day, we have two status: hold stock, do not hold stock. This is key status. Combine with our need for maximum profit, we want our
maximum can be deduct from the calculation process of DP array. We can design our stock holding status dp[i][0] as the maxmum profit we have when holding stock, 
dp[i][1] as the maximum profit we have when not holding stock.
We can see how the status transfering.
When we hold stock at i-th day, we have two situation, we might hold stock at i-1 th day, so, dp[i][0] = dp[i-1][0]. We also might buy stock at i-th day, so, 
dp[i][0]=0-prices[i] (we have 0 profit when we do not buy stock, if we don't sell stock, we have negative profit, that is reasonable).
We want to maximize our profit when we hold stock, that is minimizing our cost of buying stock. It is equal to find the lowest prices on the left side. 
That is optimize the day we buy stock. dp[i][0]=max(dp[i-1][0], -prices[i])
When we do not hold stock at i-th day, we also have two situdations, we might not be holding stock since i-1 th day, so, dp[i][1]=dp[i-1][1]. We also might selling 
stock at i-th day. So, dp[i][1]=prices[i]+dp[i-1][1]. We want to maximize our profit when we do not hold stock. dp[i][1]=max(dp[i-1][1], dp[i-1][0]+prices[i])
This is a complete status transfer describe of two status in this problem. It may be not easy to understand than greedy one, but this could help with much complicated
status transfer problem.
"""
    def maxProfit(self, prices: List[int]) -> int:
        
        dp=[[0]*2 for _ in range(len(prices))]
        dp[0][0]=-prices[0]
        dp[0][1]=0

        for i in range(1,len(prices)):
            dp[i][0]=max(dp[i-1][0], -prices[i])
            dp[i][1]=max(dp[i-1][1], dp[i-1][0]+prices[i])

        return dp[-1][1]

"""
The i-th day's profit is related with i-1 th day's profit. If i-th day price is higher than i-1 day, then we need to wait for i-th day to sale stock.
If i-th day price is lower than i-1 day, we sale stock at i-th will make profit loss. That exist decision, DP can be used.
Let dp[i] be the maximum profit we can get when saling stock at i-th day. We can not define it as the maximum profit when saling stock at or before i-th day.
If we do this, we can not do anything with dp[i] and nums[i], because we do not know when saling happens.
If nums[i]>nums[i-1], nums[i]-nums[i-1] is the extra profit we earn at i-th than i-1 th.
But, if the drop between i-th and i-1 th is too large, so that the dp[i-1]+nums[i]-nums[i-1]<0. We choose another day to buy stock.
So, dp[i]=max(prices[i]-prices[i-1]+dp[i-1],0)

Observe deduction relation, we can see that, i-th status is only related with i-1 th status. So, we can use two varibles instead of dp array to maintain dp process.
And, we can use another varible to record the current largest value to release the need of max(dp).
"""
    def maxProfit(self, prices: List[int]) -> int:
        
        dp=[0]*len(prices)

        for i in range(1,len(prices)):
            dp[i]=max(prices[i]-prices[i-1]+dp[i-1],0)
       
        return max(dp)

"""
Greedy method
The best time is finding the lowest price on the left and finding the highest price on the right. 
We keep a record of the lowest price when we loop over prices, then keep a record the largest profit with current price and current lowest price.
The current price will be always on the right side of current lowest price.
"""
    def maxProfit(self, prices: List[int]) -> int:
        
        minPrice=float('inf')
        ans=0

        for i in range(len(prices)):
            minPrice=min(minPrice, prices[i])
            ans=max(ans, prices[i]-minPrice)
    
        return ans


