###############################################################################################################################################
######################### Snapsack prpblem ####################################################################################################
###############################################################################################################################################
                  |--> (snapsack) --> (max capacity v)
                  |
                  |
                  |
snapsack problem -|
                  |                                                                 |--> (chosen) -------|
                  |                                            |--> (only 1 item) --|                    |--> (0/1 Snapsack Problem)
                  |               |--> (value w)               |                    |--> (not chosen) ---|
                  |--> (item) --> |--> (volume v)              |                 |--> (not chosen) ------|
                                  |--> (number of each item) --|--> (infinite) --|                       |--> (Complete Knapsack Problem/Unbounded Knapsack Problem)
                                                               |                 |--> (choose several)---|
                                                               |--> (different item has different number)---> (Multiple Knapsack Problem/Multi-dimensional Knapsack Problem)
                                                               |--> (group packing, at most one item per group)--> (Grouped Knapsack Problem/Knapsack Problem with Group Constraints)


0/1 snapsack problem

    416. Partition Equal Subset Sum 
        --- Given the capacity of snapsack, want to know weigher the candidates can exactly fill the snapsack. dp[-1]==target
    1049. Last Stone Weight 2 
        --- Given the capacity of snapsack, want to know the remain capacity of snapsack when trying to fill item in snapsack as more as possible.
    494. Target Sum 
        --- Given the capacity of snapsack, want to know the number of combinations of exact filling the snapsack. 
        --- The sum of positive number can be calculated.
        --- The deduction relationship is: dp[j]+=dp[j-nums[i]], each number in nums provide one possibility.
        --- dp[0]=1, other initial value is 0, we need to deduct from 0, so it must be 1, not every numer in nums needed to be choosen, so its' initial value must be 0
    474. Ones and Zeroes
        --- Given the capacity of snapsack, want to know the maximum length of choosen item list, each item has mutilple attributes.
        --- For mutiple dimension 0/1 snapsack problem, we need mutiple dimension DP array to equally deal with multiple attributes.
        --- The deduction relationship is: dp[i][j]=max(dp[i][j], dp[i-item[0]][j-item[1]])+value[i]

Unbounded snapsack problem

    518. Coin Change 2
        --- Given the capacity of snapsack, want to know the number of combinations of exact filling the snapsack.
        --- Can use unlimited number of each of candidates. So, it is a unbounded snapsack problem.
    377. Combination Sum 4
        --- Given the capacity of snapsack, can use unlimited number of each of candidates.
        --- Need to know the number of all permutations.
        --- First capacity loop, then item loop, will generate permutations.
    70. Climbing Stairs
        --- Given the capacity of snapsack, that is the n stairs. Candidates=[1,2], that is 1 or 2 steps at a time. Unlimited number of each of candidates.
        --- First 1 then 2 and first 2 then 1 are different ways to reach top. So, we need to know the number of permutations.
    322. Coin Change
        --- Given the capacity of snapsack, Unlimited number of each of candidates.
        --- Minimal count of answer. So, that is the length of chosen candidates. dp[j]=min(dp[j],dp[j-candidate[i]]+1)
    279. Perfect Squares
        --- Given the capacity of snapsack, unliminted number of each candidates.
        --- Minnimal count of answer. dp[j] = min(dp[j - i * i] + 1, dp[j])
    139. Word Break
        --- Given the capacity of snapsack, unliminted number of each candidates.
        --- String assembly is not like sum of numbers. It can not ignore the order of word. So, it is permutation, combinations might not work in most of cases.
            That means we need capacity loop first. It also can not allow assembly when the word is not we want, so, we need check whether the word is our target
            word in string.

Multiple Knapsack Problem
    The only difference between Multiple Knapsack Problem and 0/1 Knapsack Problem is that the Multiple Knapsack Problem has more than one in number of same candidate.
We just span the candidates. Making the candidate which is more than one a 0/1 candidates but showing multiple times in candidates. So, our problem is turning to 0/1
snapsack problem.

###################################################################################################################################################
##################### Best time to buy and sell stock proplem #####################################################################################
###################################################################################################################################################
Best time to buy and sell stock proplem
    121. Best time to buy and sell stock
        --- buy and sell stock only once.
        --- 2 status: hold stock, don't hold stock dp[i][0], dp[i][1]
        --- When buy stock, the previous day's profit when don't hold stock must be 0
    122. Best time to buy and sell stock II
        --- buy and sell stock unlimited times.
        --- 2 status: hold stock, don't hold stock
        --- When buy stock ,the previous day's profit must be remained
    123. Best time to buy and sell stock III
        --- buy and sell stock at most 2 times.
        --- 5 status: no operations, fisrt hold stock, first don't hold stock, second hold stock, second don't hold stock
        --- When buy stock ,the previous day's profit must be remained
    188. Best time to buy and sell stock IV
        --- buy and sell stock at most k times.
        --- 2k+1 status: no operations, fisrt hold stock, first don't hold stock,..., k-th hold stock, k-th don't hold stock
        --- When buy stock ,the previous day's profit must be remained
    309. Best time to buy and sell stock with cool down
        --- buy and sell stock unlimited times, but need to cool down one day after every stock selling.
        --- 4 status: hold stock, don't hold stock(sell stock day, cool down day, ready to buy but not in cool down day)
        --- This clasification help cool down day refer to a one day before status, help clearly classified status.
        --- When buy stock ,the previous day's profit must be remained
    714. Best time to buy and sell stock with transaction fee
        --- buy and sell stock unlimited times
        --- 2 status: hold stock, don't hold stock
        --- Every sell have to pay fee


###################################################################################################################################################
##################### Subarray or Subsequence proplem #############################################################################################
###################################################################################################################################################

    300. Longest Increasing Subsequence
        --- Subsequence do not need to be continuous.
        --- dp[i] denote the length of longest increasing subsequence ended at i-th. (need comparision with nums[i-1] or nums[j])
        --- dp[i]=max(dp[i], dp[j]+1) if nums[i]>nums[j] and i>j
        --- All element initiated with 1, because the smallest length is 1
        --- return max(dp)
    674. Longest Continuous Increasing Subsequnece
        --- Subarray need to be continuous.
        --- dp[i] denote the lengtth of longest continuous increasing subsequence ended at i-th.
        --- dp[i]=dp[i-1]+1 if nums[i]>nums[i-1]
        --- All element initiated with 1, because the smallest length is 1
        --- return max(dp)
    718. Maximum Length of Repeated Subarray
        --- Subarray need to be continuous.
        --- It is a DP problem in two array, so it should be a 2D dp array.
        --- dp[i][j] denotes the length of maximus subarray show in nums1 and also in nums2.
        --- dp[i][j]=dp[i-1][j-1]+1 if nums1[i-1]==nums2[j-1]
        --- dp arry is a (n+1)*(m+1) matrix, all element initiated with 0, it can be 0 when there is no common element. 
        --- return max(max(dp))
    1143. Longest Common Subsequence
        --- Subsequence do not need to be continuous.
        --- It is a DP problem in two array, so it should be a 2D dp array.
        --- dp[i][j] denotes the length of the longest common subsequence.
        --- dp[i][j]=dp[i-1][j-1]+1 if text1[i-1]==text2[j-1] else max(dp[i][j-1],dp[i-1][j])
            because text1[i-1] might be in text2[0:j-1], and dp[i][j-1] might be larger than dp[i-1][j-1]. Also text2[j-1] might be in 
            text1[0:i-1], and dp[i-1][j] might be larger than dp[i][j]
            Generally, longest length problem + subsequence we should compare dp[i-1][j-1], dp[i-1][j], dp[i][j-1]
        --- dp arry is a (n+1)*(m+1) matrix, all element initiated with 0, it can be 0 when there is no common element.
        --- return dp[-1][-1]
    1035. Uncrossed Lines
        --- It is a Longest common subsequence problem. Subsequence do not need to be continuous.
        --- It is a DP problem in two array, so it should be a 2D dp array.
        --- dp[i][j] denotes the length of the longest common subsequence.
        --- dp[i][j]=dp[i-1][j-1]+1 if nums1[i-1]==nums2[j-1] else max(dp[i-1][j],dp[i][j-1]).
        --- dp arry is a (n+1)*(m+1) matrix, all element initiated with 0, it can be 0 when there is no common element.
        --- return dp[-1][-1]
    53. Maximum Subarray
        --- Subarray need to be continuous.
        --- dp[i] denotest the max sum of subarray ended at i-th.
        --- dp[i]=max(dp[i-1]+nums[i], nums[i])
        --- initiate with 0
        --- return max(dp)
    392. Is Subsequence
        --- Subsequence don't need to be continuous.
        --- It is a DP problem in two array, so it should be a 2D dp array.
        --- dp[i][j] denotes the length of the longest common subsequence.
        --- dp[i][j]=dp[i-1][j-1]+1 if t[j-1]==s[i-1] else dp[i][j-1]
        --- dp arry is a (n+1)*(m+1) matrix, all element initiated with 0, it can be 0 when there is no common element.
        --- return dp[-1][-1]==len(t)
    115. Distinct Subsequences
        --- Subsequence don't need to be continuous.
        --- It is a DP problem in two array, so it should be a 2D dp array.
        --- dp[i][j] denotes the number of s[:j] appear in t[:i].
        --- dp[i][j]=dp[i-1][j-1]+dp[i][j-1] if s[j-1]==t[i-1] else dp[i][j-1]
            if s[j-1]==t[i-1], we can use s[:j-1] to match t[:i] or we can also use s[:j-2] to match t[:i], for example bagg and bag, we can 
            use second g to match bag or use first g to match bag.
        --- dp arry is a (n+1)*(m+1) matrix, all element initiated with 0, it can be 0 when there is no common element.
        --- return dp[-1][-1]
    583. Delete Operation for Two Strings
        --- Subsequence don't need to be continuous.
        --- It is a DP problem in two array, so it should be a 2D dp array.
        --- dp[i][j] denotes the min steps.
        --- dp[i][j]=dp[i-1][j-1] if word1[i-1]==word2[j-1] else min(dp[i-1][j-1]+2, dp[i-1][j]+1, dp[i][j-1]+1)
            if word1[i-1]==word2[j-1], we don't need to remove any of the new added element, otherwise, we must remove word1[i-1] or word2[j-1]
            or both of them.
        --- dp[i][0]=i, dp[0][j]=j, because the i lenght string needed to be remove to 0 length empty string.
        --- return dp[-1][-1]
    72. Edit Distance
        --- Subsequence don't need to be continuous.
        --- It is a DP problem in two array, so it should be a 2D dp array.
        --- dp[i][j] denotes the min steps to transform word1 to word2.
        --- dp[i][j]=dp[i-1][j-1] if word1[i-1]==word2[j-1] else min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+1)
            if word1[i-1]==word2[j-1], we don't need to change these two char when we transfer word1 to word2, otherwise, we must remove
            word1[i-1](dp[i-1][j]+1), or remove word2[j-1](dp[i][j-1]+1), or replace word1[i-1] with word2[j-1](dp[i-1][j-1]+1)
        --- dp[i][0]=i, dp[0][j]=j, because the i lenght string needed to be remove to 0 length empty string.
        --- return dp[-1][-1]
    647. Palindromic Substrings
        --- We can not use dp[i][j] to denote the number of palindromic substrings, there is no apparent deductive reliation with different
            number of palindromic substrings.
        --- dp[i][j] denotes whether the s[i:j+1] is a palindromic substring, then we need a 2d dp array.
        --- dp[i][j]=dp[i+1][j-1] if s[i]==s[j] and j-i>1 else if s[i]==s[j] and j-i<=1 then dp[i][j]=True
            if i==j, the same element, then dp[i][j]=True. If i+1=j and s[i]==s[j], then dp[i][j]=True. If j-1>i and s[i]==s[j], dp[i][j]=
            dp[i+1][j-1]
        --- All element initiated with 0, we include the only one element string in deductive relation.
        --- We need fill the dp array from left to right and from bottom to top. So the we should reverse the loop order of i.
        --- return count(dp[i][j]==True)
    516. Longest Palindromic Subsequence
        --- Subsequence don't need to be continuous.
        --- dp[i][j] denotes the length of the longest palindromic substring in s[i:j+1]. We need a 2d dp array.
        --- dp[i][j]=dp[i+1][j-1]+2 if s[i]==s[j] else max(dp[i-1][j], dp[i][j-1])
            If s[i]==s[j], then we can add dp[i+1][j-1] by 2, otherwise the longest one between s[i-1:j+1] and s[i:j] is dp[i][j].
        --- return dp[0][len(s)-1]
        
    






