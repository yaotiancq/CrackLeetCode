# You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.
# Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.
# Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

# Example 1:
# Input: k = 2, prices = [2,4,1]
# Output: 2
# Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

class Solution:

"""
2*k+1 status
"""
    def maxProfit(self, k: int, prices: List[int]) -> int:
        
        dp=[[0]*(2*k+1) for _ in range(len(prices))]

        for i in range(2*k+1):
            if i%2==0:
                dp[0][i]=0
            else:
                dp[0][i]=-prices[0]

        for i in range(1,len(prices)):
            for j in range(2*k+1):
                if j==0:
                    dp[i][j]=dp[i-1][j]
                else:
                    if j%2!=0:
                        dp[i][j]=max(dp[i-1][j],dp[i-1][j-1]-prices[i])
                    else:
                        dp[i][j]=max(dp[i-1][j],dp[i-1][j-1]+prices[i])

        return dp[-1][-1]
