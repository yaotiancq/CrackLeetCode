# You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
# On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. 
# However, you can buy it then immediately sell it on the same day.
# Find and return the maximum profit you can achieve.

# Example 1:
# Input: prices = [7,1,5,3,6,4]
# Output: 7
# Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
# Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
# Total profit is 4 + 3 = 7.

# Example 2:
# Input: prices = [1,2,3,4,5]
# Output: 4
# Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
# Total profit is 4.

# Example 3:
# Input: prices = [7,6,4,3,1]
# Output: 0
# Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

class Solution:

"""
dp[i][0] do not hold stock
dp[i][1] hold stock
The only different with one time buy and sell is that dp[i][1]=max(dp[i-1][1], dp[i-1][0]-prices[i]) accumulate profit when we don't hold stock. Buying stock only 
once means that dp[i-1][0]=0. That mean before we buy stock, we have zero profit. But in mulitple action in this problem, we can have profit from previous transaction.
"""
    def maxProfit(self, prices: List[int]) -> int:
        
        dp=[[0]*2 for _ in range(len(prices))]
        dp[0][0]=0
        dp[0][1]=-prices[0]

        for i in range(1,len(prices)):
            dp[i][0]=max(dp[i-1][0], dp[i-1][1]+prices[i])
            dp[i][1]=max(dp[i-1][1], dp[i-1][0]-prices[i])

        return dp[-1][0]

"""
Buy low, Sale high.
If prices[i]-prices[i-1]>0, we accumulate it on dp[i-1]
If not, we keep dp[i-1]
dp[i] is defined as the maximum profit we can get when we get i-th day.
"""
    def maxProfit(self, prices: List[int]) -> int:
        
        dp=[0]*len(prices)

        for i in range(1,len(prices)):
            dp[i]=max(prices[i]-prices[i-1],0)+dp[i-1]

        return dp[-1]

