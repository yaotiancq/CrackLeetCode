# You are a professional robber planning to rob houses along a street. 
# Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. 
# That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, 
# and it will automatically contact the police if two adjacent houses were broken into on the same night.

# Given an integer array nums representing the amount of money of each house, 
# return the maximum amount of money you can rob tonight without alerting the police.

# Example 1:
# Input: nums = [2,3,2]
# Output: 3
# Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

# Example 2:
# Input: nums = [1,2,3,1]
# Output: 4
# Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
# Total amount you can rob = 1 + 3 = 4.

# Example 3:
# Input: nums = [1,2,3]
# Output: 3

class Solution:

"""
It is similar with rob1, but we need to consider the loop situation.
If we do not need to consider robing the last house, then we only need to consider the nums[:-1] houses, and there is no limitation for the 0-th house.
The deduction relation is the same as typical rob problem.
If we do not need to consider robing the first house, then we only need to consider the nums[1:] houses, there is no limitation for the i-th house.

There are choice between first and last houses. If we need to consider first house, we can not consider the last one.
We can proof that.
In our consideration of first house, if we rob the first house, we can not rob the last one, so dp[n]=dp[n-1]. It is equal to our consideration of ignore last house.
If we do not rob the first house, we can rob the last house, so dp[n]=robrange(nums[1:]).
The DP choice can be described as whether we rob first house or not. We choose differently, the dp detail is different. This kind of choice outside dp process, which
decide dp detail is interesting.

"""
    def rob(self, nums: List[int]) -> int:
        
        def robrange(nums):
            
            if len(nums)==0:
                return 0

            dp=[0]*len(nums)
            dp[0]=nums[0]

            if len(nums)==1:
                return nums[0]

            dp[1]=max(nums[0],nums[1])

            for i in range(2,len(nums)):
                dp[i]=max(dp[i-1],dp[i-2]+nums[i])

            return dp[-1]

        if len(nums)==0:
            return 0
        
        if len(nums)==1:
            return nums[0]

        res1=robrange(nums[:-1])
        res2=robrange(nums[1:])

        return max(res1,res2)
