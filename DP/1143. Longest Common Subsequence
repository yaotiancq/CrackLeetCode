# Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
# A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted 
# without changing the relative order of the remaining characters.
# For example, "ace" is a subsequence of "abcde".
# A common subsequence of two strings is a subsequence that is common to both strings.

# Example 1:
# Input: text1 = "abcde", text2 = "ace" 

# Output: 3  
# Explanation: The longest common subsequence is "ace" and its length is 3.

class Solution:

"""
Because we only need to compare text1[i] and text2[j] to decide whether it belong to common subarray, we do not need to define dp[i][j] as "the
longest common subarray ended with i-th in text1 and j-th in text2". We just do not need compare the end of subarray[i] and subarray[i-1]. In some
of the problems, such as the longest ascending subarray, we need to compare the end of subarray[i] and subarray[i-1], and need to define dp[i][j] as "the
longest ascending subarray ended with i-th in nums1 and j-th in nums2".

Common subarray problem:
There are usually two definition for dp[i].
    --- dp[i] denode "the most commom subarray ended with nums[i]"
        -- used for the need of comparison of nums[i] and nums[i-1]
        -- initiation: set value where it was
        -- best value might come from max(dp)
    --- dp[i] denode "the most common subarray in the scope of 0~ith"
        -- If we don't need to compare nums[i] and nums[i-1] in our logic, the better definition
        -- initiation: careful, the latter value is influenced by previous value, even in initiation.
        -- best vlaue might come from dp[-1]

1D dp array v.s. 2D dp array:
    dp[i]=dp[i-1]
    dp[i][j]=max(dp[i-1][j], dp[i][j-1])

"""
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        
        dp=[[0]*len(text2) for _ in range(len(text1))]

        for j in range(len(text2)):
            if text1[0]==text2[j]:
                dp[0][j]=1
                continue
            if j>0:
                dp[0][j]=dp[0][j-1]

        for i in range(len(text1)):
            if text2[0]==text1[i]:
                dp[i][0]=1
                continue
            if i>0:
                dp[i][0]=dp[i-1][0]       

        for i in range(1,len(text1)):
            for j in range(1,len(text2)):
                if text1[i]==text2[j]:
                    dp[i][j]=dp[i-1][j-1]+1
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])

        return dp[-1][-1]
