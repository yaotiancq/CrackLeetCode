# Given an integer array nums, return the length of the longest strictly increasing subsequence.

# Example 1:
# Input: nums = [10,9,2,5,3,7,101,18]
# Output: 4
# Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

# Example 2:
# Input: nums = [0,1,0,3,2,3]
# Output: 4

# Example 3:
# Input: nums = [7,7,7,7,7,7,7]
# Output: 1

class Solution:

"""
dp[i] denotes that the length of the longest subarray end at nums[i].
We can not use the length of the longest subarray between 0~ith. Because, we need to find the relation of dp[i] and dp[i-1]. If dp[i] end at any 
index in 0~ith and dp[i-1] end at any index 0~i-1th, we can do nothing to build relation.
But, with ending at i-th definition, we can see that dp[i]=dp[j]+1, j<i and nums[j]<nums[i].
"""
    def lengthOfLIS(self, nums: List[int]) -> int:
        
        dp=[1]*len(nums)

        for i in range(1,len(nums)):
            for j in range(i):
                if nums[i]>nums[j]:
                    dp[i]=max(dp[i],dp[j]+1)

        return max(dp)

class Solution:
    def bs(self, nums, target):

        left=0
        right=len(nums)-1

        while left<=right:
            mid=left+(right-left)//2
            if nums[mid]>=target:
                right=mid-1
            else:
                left=mid+1
        
        if left>len(nums)-1:
            return len(nums)-1
        return left

"""
This is the optimal solution for LIS.
Maintain one subarray, and replace the one which is larger or equal than num, and return the length of this subarray.
The one larger than end of subarray can extend subarray, the one smaller will replace elements.
"""
    def lengthOfLIS(self, nums: List[int]) -> int:
        
        sub=[]

        for num in nums:
            if len(sub)==0 or sub[-1]<num:
                sub.append(num)
            else:
                idx=self.bs(sub,num) #bisect_left(nums, target)
                sub[idx]=num

        return len(sub)
