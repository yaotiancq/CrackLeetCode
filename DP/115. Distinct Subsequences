# Given two strings s and t, return the number of distinct subsequences of s which equals t.
# The test cases are generated so that the answer fits on a 32-bit signed integer. 

# Example 1:
# Input: s = "rabbbit", t = "rabbit"
# Output: 3
# Explanation:
# As shown below, there are 3 ways you can generate "rabbit" from s.
# rabbbit
# rabbbit
# rabbbit

# Example 2:
# Input: s = "babgbag", t = "bag"
# Output: 5
# Explanation:
# As shown below, there are 5 ways you can generate "bag" from s.
# babgbag
# babgbag
# babgbag
# babgbag
# babgbag

class Solution:


"""
This problem has two tricky part:
First:
dp[0][j] denotes that how many subsequence in subarray of s that is equal to empty string ''. We think this should be 1. So, initial all first line element to 1.
dp[i][0] denotes that how many subarray of t is equal to empty string ''. Of course, there should be 0. empty string '' have 0 combinations to form subarray of t.
Second:
if t[i-1]==s[j-1], we have two source. For example, s: bagg  t: bag.
When s[3]==t[2] meet, dp[2][3]=dp[1][2] (dp[i][j]=dp[i-1][j-1]). But it can also meet s[2]. Current meet and previous meet.
dp[2][3]=dp[2][2]
We want different path, so, dp[2][3]=dp[1][2]+dp[2][2] (dp[i][j]=dp[i-1][j-1]+dp[i][j-1])

"""
    def numDistinct(self, s: str, t: str) -> int:
        
        dp=[[0]*(len(s)+1) for _ in range(len(t)+1)]

        for j in range(len(s)+1):
            dp[0][j]=1

        for i in range(1,len(t)+1):
            for j in range(1,len(s)+1):
                if t[i-1]!=s[j-1]:
                    dp[i][j]=dp[i][j-1]
                else:
                    dp[i][j]=dp[i-1][j-1]+dp[i][j-1]

        return dp[-1][-1]

"""
We can guess that subarray's result has relationship with previous subarray. We can try to use DP to solve this problem. Two string mean that 2D DP array.
We can define dp[i][j] as the number of distinct subsequences of s[:j+1] which equal to t[:i+1].

Let's start with simplest example: s='aaaa', t='aaa', the dp array should be follow:
    a a a a
 a  1 2 3 4
 a  0 1 3 6
 a  0 0 1 4
Find an 'a' in 'a', there is 1 combination;
Find an 'a' in 'aa', there is 2 combiantions;
Find an 'a' in 'aaa', there is 3 combinations;
...
Find an 'aa' in 'a', there is 0 combinations; 
...
Find an 'aaa' in 'aaaa', there is 4 combinations;
We can see that when s[j]==t[i], dp[i][j]=dp[i-1][j-1]+dp[i][j-1]
Actually, Comb(n,m)=Comb(n-1,m)+Comb(n-1,m-1)
This can be proved: 
Let's consider there is one special object in n objects. If we do not choose this object, we have to choose m objects in n objects, that is Comb(n-1,m).
If we choose this object, we have to choose m-1 objects in n-1 objects, that s Comb(n-1,m-1)
So, Comb(n,m)=Comb(n-1,m)+Comb(n-1,m-1)

When s[j]!=t[i], dp[i][j]=dp[i][j-1]

We can validate this:
    b a b g b a g
  b 1 1 2 2 3 3 3
  a 0 1 1 1 1 4 4
  g 0 0 0 1 1 1 5
"""
    def numDistinct(self, s: str, t: str) -> int:
        
        dp=[[0]*len(s) for _ in range(len(t))]

        if s[0]==t[0]:
            dp[0][0]=1

        for j in range(1,len(s)):
            dp[0][j]=dp[0][j-1]
            if s[j]==t[0]:
                dp[0][j]=dp[0][j-1]+1

        for i in range(1,len(t)):
            for j in range(1,len(s)):
                if t[i]==s[j]:
                    dp[i][j]=dp[i][j-1]+dp[i-1][j-1]
                else:
                    dp[i][j]=dp[i][j-1]
        
        return dp[-1][-1]
