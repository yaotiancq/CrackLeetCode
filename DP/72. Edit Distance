# Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
# You have the following three operations permitted on a word:
# Insert a character
# Delete a character
# Replace a character 

# Example 1:
# Input: word1 = "horse", word2 = "ros"
# Output: 3
# Explanation: 
# horse -> rorse (replace 'h' with 'r')
# rorse -> rose (remove 'r')
# rose -> ros (remove 'e')

# Example 2:
# Input: word1 = "intention", word2 = "execution"
# Output: 5
# Explanation: 
# intention -> inention (remove 't')
# inention -> enention (replace 'i' with 'e')
# enention -> exention (replace 'n' with 'x')
# exention -> exection (replace 'n' with 'c')
# exection -> execution (insert 'u')


class Solution:

"""
tricky part:
When word1[j-1]!=word2[i-1], we have tree ways to deal with it.
replace: dp[i][j]=dp[i-1][j-1]+1
insertion: dp[i][j]=dp[i][j-1]+1 we can saw it as if it insert 1 char word1[j-1] to subarray word1[:j-1], so that it reach dp[i-1][j-1]
deletion: dp[i][j]=dp[i-1][j]+1 we can saw it as if it delete 1 more char from word1, because target is shorter subarray of word2 which need subarray of word1's
1 more deletion to transfer to shorter subarray of word2.
"""
    def minDistance(self, word1: str, word2: str) -> int:
        
        dp=[[0]*(len(word1)+1) for _ in range(len(word2)+1)]

        for j in range(len(word1)+1):
            dp[0][j]=j

        for i in range(len(word2)+1):
            dp[i][0]=i  

        for i in range(1,len(word2)+1):
            for j in range(1,len(word1)+1):
                if word1[j-1]==word2[i-1]:
                    dp[i][j]=dp[i-1][j-1]
                else:
                    dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1

        return dp[-1][-1]      
