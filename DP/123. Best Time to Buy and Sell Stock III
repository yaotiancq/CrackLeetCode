# You are given an array prices where prices[i] is the price of a given stock on the ith day.
# Find the maximum profit you can achieve. You may complete at most two transactions.
# Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

# Example 1:
# Input: prices = [3,3,5,0,0,3,1,4]
# Output: 6
# Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
# Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        dp=[[0]*5 for _ in range(len(prices))]

        dp[0][0]=0
        dp[0][1]=-prices[0]
        dp[0][2]=0
        dp[0][3]=-prices[0]
        dp[0][4]=0

        for i in range(1,len(prices)):
            dp[i][0]=dp[i][0]
            dp[i][1]=max(dp[i-1][1], dp[i-1][0]-prices[i])
            dp[i][2]=max(dp[i-1][2], dp[i-1][1]+prices[i])
            dp[i][3]=max(dp[i-1][3], dp[i-1][2]-prices[i])
            dp[i][4]=max(dp[i-1][4], dp[i-1][3]+prices[i])

        return dp[-1][-1]
