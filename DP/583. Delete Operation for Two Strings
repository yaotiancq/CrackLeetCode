# Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.
# In one step, you can delete exactly one character in either string.

# Example 1:
# Input: word1 = "sea", word2 = "eat"
# Output: 2
# Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

# Example 2:
# Input: word1 = "leetcode", word2 = "etco"
# Output: 4

class Solution:

"""
If word1[j]==word2[i], dp[i][j]=dp[i-1][j-1], the two new added char could be added to the final result of word1[:j] and word2[:i]. The number of steps won't change.
If not, we got 3 different ways to get the final result.
1. remove both of the new char. dp[i][j]=dp[i-1][j-1]+2
2. remove word1 new char. dp[i][j]=dp[i][j-1]+1
3. remove word2 new char. dp[i][j]=dp[i-1][j]+1
We should think how we know dp[i][j] from past result. dp[i-1][j-1], dp[i][j-1], dp[i-1][j] are all calculated.
dp[i][j] have 2 more char to remove than dp[i-1][j-1]
dp[i][j] have 1 more char to remove than dp[i][j-1]
dp[i][j] have 1 more char to remove than dp[i-1][j]
We want the minimal steps, so we choose the minimal number from these 3 different ways.
"""
    def minDistance(self, word1: str, word2: str) -> int:
        
        dp=[[0]*len(word1) for _ in range(len(word2))]

        if word1[0]==word2[0]:
            dp[0][0]=0
        else:
            dp[0][0]=2

        jFirst=True
        for j in range(1,len(word1)):
            if dp[0][0]==0:
                dp[0][j]=dp[0][j-1]+1
            else:
                dp[0][j]=dp[0][j-1]+1
                if word1[j]==word2[0] and jFirst:
                    dp[0][j]=dp[0][j-1]-1
                    jFirst=False

        iFirst=True
        for i in range(1,len(word2)):
            if dp[0][0]==0:
                dp[i][0]=dp[i-1][0]+1
            else:
                dp[i][0]=dp[i-1][0]+1
                if word1[0]==word2[i] and iFirst:
                    dp[i][0]=dp[i-1][0]-1
                    iFirst=False
        
        for i in range(1,len(word2)):
            for j in range(1,len(word1)):
                if word2[i]==word1[j]:
                    dp[i][j]=dp[i-1][j-1]
                else:
                    dp[i][j]=min(dp[i-1][j-1]+2,dp[i-1][j]+1,dp[i][j-1]+1)

        return dp[-1][-1]

class Solution:

"""
We could calculate the length of the longest common subsequence of word1 and word2, then the remain char in word1 and word2 is what we need to delete
The longest common subsequence problem:
if word1[j]==word2[i], dp[i][j]=dp[i-1][j-1]+1, the lenght of common subsequence should add 1.
if not, dp[i][j] can be either dp[i-1][j] or dp[i][j-1], we choose the larger one.
"""
    def minDistance(self, word1: str, word2: str) -> int:
        
        dp=[[0]*len(word1) for _ in range(len(word2))]

        if word1[0]==word2[0]:
            dp[0][0]=1

        for j in range(1,len(word1)):
            dp[0][j]=dp[0][j-1]
            if word1[j]==word2[0]:
                dp[0][j]=1

        for i in range(1,len(word2)):
            dp[i][0]=dp[i-1][0]
            if word1[0]==word2[i]:
                dp[i][0]=1
        
        for i in range(1,len(word2)):
            for j in range(1,len(word1)):
                if word2[i]==word1[j]:
                    dp[i][j]=dp[i-1][j-1]+1
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])

        return len(word1)+len(word2)-2*dp[-1][-1]
