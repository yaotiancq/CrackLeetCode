# There are n soldiers standing in a line. Each soldier is assigned a unique rating value.
# You have to form a team of 3 soldiers amongst them under the following rules:
# Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
# A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
# Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

# Example 1:
# Input: rating = [2,5,3,4,1]
# Output: 3
# Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

# Example 2:
# Input: rating = [2,1,3]
# Output: 0
# Explanation: We can't form any team given the conditions.

class Solution:

"""
The arrangement of element, such as to be in 1st postion or 2nd position or 3rd position is also a dynamic programming problem.
Try to solve this problem through Binary Indexed Tree

"""
    def numTeams(self, rating: List[int]) -> int:
        
        dp1=[[0]*len(rating) for _ in range(3)]
        dp2=[[0]*len(rating) for _ in range(3)]

        for j in range(len(rating)):
            dp1[0][j]=1
            dp2[0][j]=1

        d1={}
        for i in range(len(rating)):
            d1[rating[i]]=[]
            for j in range(i):
                if rating[j]<rating[i]:
                    d1[rating[i]].append(j)

        d2={}
        for i in range(len(rating)):
            d2[rating[i]]=[]
            for j in range(i):
                if rating[j]>rating[i]:
                    d2[rating[i]].append(j)      

        for i in range(1,3):
            for j in range(i,len(rating)):
                temp=0
                if rating[j] in d1:
                    for k in d1[rating[j]]:
                        temp+=dp1[i-1][k]
                    dp1[i][j]=temp
    
        for i in range(1,3):
            for j in range(i,len(rating)):
                temp=0
                if rating[j] in d2:
                    for k in d2[rating[j]]:
                        temp+=dp2[i-1][k]
                    dp2[i][j]=temp

        return sum(dp1[-1])+sum(dp2[-1])

        
