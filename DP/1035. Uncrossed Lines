# You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 
# (in the order they are given) on two separate horizontal lines.
# We may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:
# nums1[i] == nums2[j], and
# the line we draw does not intersect any other connecting (non-horizontal) line.
# Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).
# Return the maximum number of connecting lines we can draw in this way.

# Example 1:
# Input: nums1 = [1,4,2], nums2 = [1,2,4]
# Output: 2
# Explanation: We can draw 2 uncrossed lines as in the diagram.
# We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.


class Solution:

"""
dp dimension is equal to len(nums1)+1 * len(nums2)+1;
i loop from 1 to len(nums1)+1, j loop from 1 to len(nums2)+1;
So, number start from i-1, j-1, that is start from index 0;
"""
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        
        dp=[[0]*(len(nums2)+1) for _ in range(len(nums1)+1)]

        for i in range(1,len(nums1)+1):
            for j in range(1,len(nums2)+1):
                if nums1[i-1]==nums2[j-1]:
                    dp[i][j]=dp[i-1][j-1]+1
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])

        return dp[-1][-1]

"""
This problem is actually "the Longest Common Subsequence" problem.

Aware that the initiation.
Aware that the loop start from 1.
"""
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        
        dp=[[0]*len(nums2) for _ in range(len(nums1))]

        if nums1[0]==nums2[0]:
            dp[0][0]=1

        for j in range(1,len(nums2)):
            if j>0:
                dp[0][j]=dp[0][j-1]
            if nums1[0]==nums2[j]:
                dp[0][j]=1
        
        for i in range(1,len(nums1)):
            if i>0:
                dp[i][0]=dp[i-1][0]
            if nums2[0]==nums1[i]:
                dp[i][0]=1

        for i in range(1,len(nums1)):
            for j in range(1,len(nums2)):
                if nums1[i]==nums2[j]:
                    dp[i][j]=dp[i-1][j-1]+1
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])

        return dp[-1][-1]
