# You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
# the only constraint stopping you from robbing each of them is that adjacent houses have security systems 
# connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
# Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

# Example 1:
# Input: nums = [1,2,3,1]
# Output: 4
# Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
# Total amount you can rob = 1 + 3 = 4.

class Solution:

"""
The status of current house(rob or not) is decided by previous house status. This is a deduction relationship.
If we rob i-th house, then we can not rob i-1th house. Our max value will be dp[i-2]+nums[i].
If we do not rob i-th house, then our max value will equal to dp[i-1]. We must know that dp[i-1] do not mean we must rob i-1th house.
So, the deduction relationship is : dp[i]=max(dp[i-2]+nums[i], dp[i-1]).
We need to initial dp[0]=nums[0] and dp[1]=max(nums[0],nums[1])

How to dicide dp length?
Python list start from 0, if target is a list, then let dp[0] has meaning. If target is a number, then dp[n] is needed, the dp[0] might or might not have meaning.

In this problem, the input nums' lenght is reqired to be longer than 0. So, there is no need for len(nums)==0 judgement. But it might usefull in some cases.
"""
    def rob(self, nums: List[int]) -> int:
        
        if len(nums)==0:
            return 0
        
        dp=[0]*len(nums)
        dp[0]=nums[0]
        
        if len(nums)==1:
            return nums[0]

        dp[1]=max(nums[0],nums[1])

        for i in range(2,len(nums)):
            dp[i]=max(dp[i-1],dp[i-2]+nums[i])
        
        return dp[-1]
