# In this problem, a tree is an undirected graph that is connected and has no cycles.
# You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. 
# The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. 
# The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.
# Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

# Example 1:
# Input: edges = [[1,2],[1,3],[2,3]]
# Output: [2,3]

# Example 2:
# Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
# Output: [1,4]


"""
Union-Find
With the build of union set, if we find the two candidates are already in the same set (same root), we can say that they are already connected. Any
more connection between these two must be redundant.
"""
class UnionFind:
    def __init__(self):
        self.d={}

    def find(self, x):
        y=self.d.get(x,x)
        if y!=x:
            y=self.find(y)
            self.d[x]=y
        return y
    
    def union(self, x, y):
        x=self.find(x)
        y=self.find(y)
        if x==y:
            return
        else:
            self.d[x]=y

    def isSame(self,x,y):
        x=self.find(x)
        y=self.find(y)
        return x==y

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        
        uf=UnionFind()
        for edge in edges:
            if uf.isSame(edge[0],edge[1]):
                return edge
            else:
                uf.union(edge[0],edge[1])
