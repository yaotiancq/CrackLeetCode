# There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). 
# The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge 
# between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.
# You want to determine if there is a valid path that exists from vertex source to vertex destination.
# Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

# Example 1:

# Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
# Output: true
# Explanation: There are two paths from vertex 0 to vertex 2:
# - 0 → 1 → 2
# - 0 → 2

class Solution:

"""
BFS
"""
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        def createGraph():

            graph={}

            for edge in edges:
                if edge[0] not in graph:
                    graph[edge[0]]=[edge[1]]
                else:
                    graph[edge[0]].append(edge[1])
                if edge[1] not in graph:
                    graph[edge[1]]=[edge[0]]
                else:
                    graph[edge[1]].append(edge[0])
            
            for i in range(n):
                if i not in graph:
                    graph[i]=[]

            return graph

        def bfs():

            while q:

                node=q.pop(0)
                if node==destination:
                    return True

                for neighbor in graph[node]:
                    if neighbor not in visited:
                        visited.add(neighbor)
                        q.append(neighbor)

            return False

        q=[]
        q.append(source)
        
        visited=set()
        visited.add(source)

        graph=createGraph()

        return bfs()

class Solution:

"""
DFS
There are two different way to write dfs:
1. process current node:
dfs(curr_node):
    if visited[curr_node]==True:
        return 
    visited[curr_node]=True
    for node in graph[curr_node]:
        dfs(node)

2. process next node:
dfs(curr_node):
    for node in graph[curr_node]:
        if node not in visited:
            visited[node]=True
            dfs(node)
backtracking is used to cancel the current node operation. If we don't use backtracking to cancel current node, it do not affect the search of other
route. But, if we need to record one possible accurate route, we need to cancel current node operation. The difference is o
"""
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        def createGraph():

            graph={}

            for edge in edges:
                if edge[0] not in graph:
                    graph[edge[0]]=[edge[1]]
                else:
                    graph[edge[0]].append(edge[1])
                if edge[1] not in graph:
                    graph[edge[1]]=[edge[0]]
                else:
                    graph[edge[1]].append(edge[0])
            
            for i in range(n):
                if i not in graph:
                    graph[i]=[]

            return graph

        def dfs(currNode):
            if currNode==destination:
                return True

            visited.add(currNode)

            for node in graph[currNode]:
                if node not in visited:
                    if dfs(node):
                        return True

            return False
        
        visited=set()

        graph=createGraph()

        return dfs(source)
