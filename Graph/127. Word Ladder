# A transformation sequence from word beginWord to word endWord using a dictionary wordList is 
# a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
# Every adjacent pair of words differs by a single letter.
# Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
# sk == endWord
# Given two words, beginWord and endWord, and a dictionary wordList, 
# return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

# Example 1:
# Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
# Output: 5
# Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

# Example 2:
# Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
# Output: 0
# Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.


class Solution:

"""
Use BFS to find shortest route. The first endword we meet is the shortest path.

How to find the level of route or the lenght of the route, we can add one more information to queue when we push in start point or the neighbor along
with the start point or neight: q.append([start, level]). For each neighbor of currPoint: q.append([neighbor, level+1])
So, it can track the level of each point, because for each neighbor of currpoint, its level is its precessor's level plus one. So, every point in
the same BFS level have the same level start from the start point.

We can build a graph to reduce the time complexity of BFS process. 
"""
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:

        def bfs():

            while q:
                currWord,currLevel=q.pop(0)

                if currWord==endWord:
                    return currLevel

                visited.add(currWord)

                for neighbor in graph[currWord]:
                    if neighbor not in visited:
                        q.append([neighbor, currLevel+1])
            
            return 0

        def createGraph():

            words=set([beginWord]+wordList)
            graph={}

            for word in words:
                for i in range(len(word)):
                    for j in range(26):
                        c=chr(97+j)
                        newWord=word[:i]+c+word[i+1:]
                        if newWord!=word and newWord in words:
                            if word not in graph:
                                graph[word]=[newWord]
                            else:
                                graph[word].append(newWord)

            for word in words:
                if word not in graph:
                    graph[word]=[]

            return graph


        if endWord not in wordList:
            return 0
        
        q=[]
        q.append([beginWord,1])

        visited=set()

        graph=createGraph()

        return bfs()


