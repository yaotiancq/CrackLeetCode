# There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network 
# where connections[i] = [ai, bi] represents a connection between computers ai and bi. 
# Any computer can reach any other computer directly or indirectly through the network.
# You are given an initial computer network connections. You can extract certain cables between two directly connected computers, 
# and place them between any pair of disconnected computers to make them directly connected.
# Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.

# Example 1:
# Input: n = 4, connections = [[0,1],[0,2],[1,2]]
# Output: 1
# Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.

# Example 2:
# Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
# Output: 2

# Example 3:
# Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
# Output: -1
# Explanation: There are not enough cables.

class Solution:

"""
If the number of connections is less than the minimal number of possible connection number n-1, then it should return -1.
Otherwise, we should count the island number to decide the number of cable we need to connect all islands.
"""
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        
        def createGraph():

            graph={}
            for con in connections:
                if con[0] not in graph:
                    graph[con[0]]=[con[1]]
                else:
                    graph[con[0]].append(con[1])
                if con[1] not in graph:
                    graph[con[1]]=[con[0]]
                else:
                    graph[con[1]].append(con[0])

            for i in range(n):
                if i not in graph:
                    graph[i]=[]

            return graph

        def dfs(i):
            
            visited.add(i)
            for nei in graph[i]:
                if nei not in visited:
                    dfs(nei)

        graph=createGraph()

        visited=set()
        cnt=0
        for i in range(n):
            if i not in visited:
                cnt+=1
                dfs(i)

        return cnt-1 if len(connections)>=n-1 else -1
