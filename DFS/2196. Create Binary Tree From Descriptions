# You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is 
# the parent of childi in a binary tree of unique values. Furthermore,
# If isLefti == 1, then childi is the left child of parenti.
# If isLefti == 0, then childi is the right child of parenti.
# Construct the binary tree described by descriptions and return its root.
# The test cases will be generated such that the binary tree is valid.

# Example 1:
# Input: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]
# Output: [50,20,80,15,17,19]
# Explanation: The root node is the node with value 50 since it has no parent.
# The resulting binary tree is shown in the diagram.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

"""
Creating a binary tree under some rules is a kind of problem. To solve this kind of problem, we need few steps:

First: we need a dfs model
    def dfs(nums):
        if nums==[]:
            return
        rootVal=f1(nums)
        rootLeftVal=f2(nums)
        rootRightVal=f3(nums)
        root=TreeNode(rootVal)
        root.left=dfs(nums)
        root.right=dfs(nums)
        return root
Second: we need identified the rootVal in nums.

First part is almost fixed model. The second part is the key of such problem, but it is easy to solve because root is unique in binary tree: it don't have parent, or
it is the first element of list in preorder traversal, or it is the last element of list in postorder traversal, or some kind of middle element in inorder traversal.
"""
    def createBinaryTree(self, descriptions: List[List[int]]) -> Optional[TreeNode]:

        def dfs(rootVal):
            if rootVal==0:
                return
            
            root=TreeNode(rootVal)
            lVal=0
            rVal=0
            if rootVal in d:
                lVal, rVal=d[rootVal]
                
            root.left=dfs(lVal)
            root.right=dfs(rVal)

            return root

        d1={}
        d={}
        for item in descriptions:
            if item[1] not in d1:
                d1[item[1]]=1
            if item[0] not in d:
                d[item[0]]=[item[1],0] if item[2]==1 else [0,item[1]]
            else:
                if item[2]==0:
                    d[item[0]][1]=item[1]
                else:
                    d[item[0]][0]=item[1]

        rootVal=0
        for item in descriptions:
            if item[0] not in d1:
                rootVal=item[0]
                break

        return dfs(rootVal)
