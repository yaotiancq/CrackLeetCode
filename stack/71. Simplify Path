# Given an absolute path for a Unix-style file system, which begins with a slash '/', 
# transform this path into its simplified canonical path.

# In Unix-style file system context, a single period '.' signifies the current directory, 
# a double period ".." denotes moving up one directory level, and multiple slashes such as "//" are 
# interpreted as a single slash. In this problem, treat sequences of periods not covered by 
# the previous rules (like "...") as valid names for files or directories.

# The simplified canonical path should adhere to the following rules:

# It must start with a single slash '/'.
# Directories within the path should be separated by only one slash '/'.
# It should not end with a slash '/', unless it's the root directory.
# It should exclude any single or double periods used to denote current or parent directories.
# Return the new path.

# Example 1:
# Input: path = "/home/"
# Output: "/home"
# Explanation:
# The trailing slash should be removed.

# Example 2:
# Input: path = "/home//foo/"
# Output: "/home/foo"
# Explanation:
# Multiple consecutive slashes are replaced by a single one.

# Example 3:
# Input: path = "/home/user/Documents/../Pictures"
# Output: "/home/user/Pictures"
# Explanation:
# A double period ".." refers to the directory up a level.

# Example 4:
# Input: path = "/../"
# Output: "/"
# Explanation:
# Going one level up from the root directory is not possible.

# Example 5:
# Input: path = "/.../a/../b/c/../d/./"
# Output: "/.../b/d"
# Explanation:
# "..." is a valid name for a directory in this problem.

class Solution:
"""
Deal with rules..
"""
    def simplifyPath(self, path: str) -> str:
        stack=[]
        path_list=path.split('/')
        
        for i in range(len(path_list)):
            if path_list[i]=='':
                continue
            elif path_list[i]=='..' and len(stack)==0:
                continue
            elif path_list[i]=='.':
                continue
            elif path_list[i]=='..' and len(stack)!=0:
                stack.pop()
                stack.pop()
            else:
                stack.append('/')
                stack.append(path_list[i])

        return ''.join(stack) if stack else '/'


"""
If meet '/', we need to decide to make some change or not. If not, add it to stack.
One more consideration, no all the simple is end with '/'. So, we add it to the end of the s, in order to keep
the same processing logic.
"""
    def simplifyPath(self, path: str) -> str:
        stack=[]
        stack.append('/')

        if path[-1]!='/':
            path+='/'

        for i in range(1,len(path)):
            if path[i]=='/':
                if stack[-1]=='/':
                    continue
                elif stack[-2:]==['/','.']:
                    stack.pop()
                elif stack[-3:]==['/','.','.']:
                    if len(stack)==3:
                        stack.pop()
                        stack.pop()
                    else:
                        stack.pop()
                        stack.pop()
                        stack.pop()
                        while stack[-1]!='/':
                            stack.pop()
                else:
                    stack.append(path[i])
            else:
                stack.append(path[i])
        if stack[-1]=='/' and len(stack)>1:
            stack.pop()
        return ''.join(stack)

"""
recomanded method:
split the string by '/' first, ignore the '' and '.', just need to deal with '..'. It is clear that we need stack to deal with it.
"""
class Solution:
    def simplifyPath(self, path: str) -> str:
        
        stack=[]
        path_list = path.split('/')

        for item in path_list:
            if item!='' and item!='.':
                if item == '..':
                    if stack!=[]:
                        stack.pop()
                    continue
                stack.append(item)
   
        return '/'+'/'.join(stack)

