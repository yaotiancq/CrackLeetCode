# There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. 
# You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store
# at the start of the ith minute and all those customers leave after the end of that minute.
# On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 
# if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.
# When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.
# The bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.
# Return the maximum number of customers that can be satisfied throughout the day.

# Example 1:
# Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3
# Output: 16
# Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
# The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.

"""
Slide window. What is special is that we do not need to care about the grumpy[i]=0 position. We only need to find the maxmum minute window of 
grumpy[i]==1 position.
Must remenber, the left+=1 happend when the condition right-left+1==minutes happend. So, it the first level in the for loop body, not second or third level.
As usaual, the max update happen when the right-left+1==minute condition satisfied. Then we need to move left at the end of for loop. Or, otherwise, the right
will go further and left won't catch.
"""

def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:
    
    customers0=0
    customers1=0
    maxCustomer1=0
    left=0
    for right in range(len(grumpy)):
        if grumpy[right]==0:
            customers0+=customers[right]
        else:
            customers1+=customers[right]          
        if right-left+1==minutes:
            maxCustomer1=max(maxCustomer1,customers1)
            if grumpy[left]==1:
                customers1-=customers[left]
            left+=1
    
    return customers0+maxCustomer

def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:
    
    j=0
    base=0
    
    for k in range(len(grumpy)):
        if grumpy[k]==0:
            base+=customers[k]

    ans = base

    for i in range(len(customers)):

        if grumpy[i]==1:       
            base+=customers[i]
            ans=max(ans, base)
        minutes-=1

        if minutes<=0:
            if grumpy[j]==1:
                base-=customers[j]
            j+=1
            minutes+=1

    return ans

